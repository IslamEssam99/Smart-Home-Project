
Slave code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000d10  00000da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000da6  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8d  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034a  00000000  00000000  00003aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d5  00000000  00000000  00003def  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000044c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000333  00000000  00000000  00004704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000794  00000000  00000000  00004a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_10>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	60 03       	mulsu	r22, r16
  56:	74 03       	mulsu	r23, r20
  58:	88 03       	fmulsu	r16, r16
  5a:	9c 03       	fmulsu	r17, r20
  5c:	c4 03       	fmuls	r20, r20
  5e:	b0 03       	fmuls	r19, r16
  60:	4f 03       	fmul	r20, r23
  62:	4f 03       	fmul	r20, r23
  64:	4f 03       	fmul	r20, r23
  66:	4f 03       	fmul	r20, r23
  68:	4f 03       	fmul	r20, r23
  6a:	4f 03       	fmul	r20, r23
  6c:	4f 03       	fmul	r20, r23
  6e:	4f 03       	fmul	r20, r23
  70:	4f 03       	fmul	r20, r23
  72:	4f 03       	fmul	r20, r23
  74:	d8 03       	fmulsu	r21, r16
  76:	dd 03       	fmulsu	r21, r21
  78:	e2 03       	fmuls	r22, r18
  7a:	e7 03       	fmuls	r22, r23
  7c:	f3 03       	fmuls	r23, r19
  7e:	ec 03       	fmulsu	r22, r20
  80:	4f 03       	fmul	r20, r23
  82:	4f 03       	fmul	r20, r23
  84:	4f 03       	fmul	r20, r23
  86:	4f 03       	fmul	r20, r23
  88:	4f 03       	fmul	r20, r23
  8a:	4f 03       	fmul	r20, r23
  8c:	4f 03       	fmul	r20, r23
  8e:	4f 03       	fmul	r20, r23
  90:	4f 03       	fmul	r20, r23
  92:	4f 03       	fmul	r20, r23
  94:	f8 03       	fmulsu	r23, r16
  96:	fd 03       	fmulsu	r23, r21
  98:	02 04       	cpc	r0, r2
  9a:	07 04       	cpc	r0, r7
  9c:	13 04       	cpc	r1, r3
  9e:	0c 04       	cpc	r0, r12
  a0:	4f 03       	fmul	r20, r23
  a2:	4f 03       	fmul	r20, r23
  a4:	4f 03       	fmul	r20, r23
  a6:	4f 03       	fmul	r20, r23
  a8:	4f 03       	fmul	r20, r23
  aa:	4f 03       	fmul	r20, r23
  ac:	4f 03       	fmul	r20, r23
  ae:	4f 03       	fmul	r20, r23
  b0:	4f 03       	fmul	r20, r23
  b2:	18 04       	cpc	r1, r8

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf e5       	ldi	r28, 0x5F	; 95
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	a0 e6       	ldi	r26, 0x60	; 96
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e0 e1       	ldi	r30, 0x10	; 16
  c8:	fd e0       	ldi	r31, 0x0D	; 13
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 36       	cpi	r26, 0x62	; 98
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	a2 e6       	ldi	r26, 0x62	; 98
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 36       	cpi	r26, 0x66	; 102
  e2:	b1 07       	cpc	r27, r17
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 2e 03 	call	0x65c	; 0x65c <main>
  ea:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <ADC_vinit>:
#include "std_macros.h"
#include "STD_Types.h"
void ADC_vinit(void)
{
	/*configure VREF to the internal voltage(2.56 V)*/
	SET_BIT(ADMUX,REFS0);
  f2:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
  f4:	3f 9a       	sbi	0x07, 7	; 7
	/*************************************/
	SET_BIT(ADCSRA,ADEN); // ENable ADC
  f6:	37 9a       	sbi	0x06, 7	; 6
	
	/* adjust ADC clock by select the division factor----->64*/
	SET_BIT(ADCSRA,ADPS2);
  f8:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  fa:	31 9a       	sbi	0x06, 1	; 6
	/***********************************/
}
  fc:	08 95       	ret

000000fe <ADC_u16Read>:
uint16 ADC_u16Read(void)
{
	uint16 read_val; // which contain the converted value which will be returned
	SET_BIT(ADCSRA,ADSC); // start the ADC conversion
  fe:	36 9a       	sbi	0x06, 6	; 6
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1 when conversion complete
 100:	34 9b       	sbis	0x06, 4	; 6
 102:	fe cf       	rjmp	.-4      	; 0x100 <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
 104:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL); //reas the ADCL register
 106:	84 b1       	in	r24, 0x04	; 4
 108:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);//read the whole register
 10a:	45 b1       	in	r20, 0x05	; 5
 10c:	34 2f       	mov	r19, r20
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	82 2b       	or	r24, r18
 112:	93 2b       	or	r25, r19
	return read_val ; // return the converted value
 114:	08 95       	ret

00000116 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
	switch(portname)
 116:	82 34       	cpi	r24, 0x42	; 66
 118:	51 f1       	breq	.+84     	; 0x16e <DIO_vsetPINDir+0x58>
 11a:	83 34       	cpi	r24, 0x43	; 67
 11c:	20 f4       	brcc	.+8      	; 0x126 <DIO_vsetPINDir+0x10>
 11e:	81 34       	cpi	r24, 0x41	; 65
 120:	09 f0       	breq	.+2      	; 0x124 <DIO_vsetPINDir+0xe>
 122:	7b c0       	rjmp	.+246    	; 0x21a <DIO_vsetPINDir+0x104>
 124:	07 c0       	rjmp	.+14     	; 0x134 <DIO_vsetPINDir+0x1e>
 126:	83 34       	cpi	r24, 0x43	; 67
 128:	09 f4       	brne	.+2      	; 0x12c <DIO_vsetPINDir+0x16>
 12a:	3e c0       	rjmp	.+124    	; 0x1a8 <DIO_vsetPINDir+0x92>
 12c:	84 34       	cpi	r24, 0x44	; 68
 12e:	09 f0       	breq	.+2      	; 0x132 <DIO_vsetPINDir+0x1c>
 130:	74 c0       	rjmp	.+232    	; 0x21a <DIO_vsetPINDir+0x104>
 132:	57 c0       	rjmp	.+174    	; 0x1e2 <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	69 f4       	brne	.+26     	; 0x152 <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 138:	2a b3       	in	r18, 0x1a	; 26
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	ac 01       	movw	r20, r24
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_vsetPINDir+0x30>
 142:	44 0f       	add	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_vsetPINDir+0x2c>
 14a:	ba 01       	movw	r22, r20
 14c:	62 2b       	or	r22, r18
 14e:	6a bb       	out	0x1a, r22	; 26
 150:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 152:	2a b3       	in	r18, 0x1a	; 26
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_vsetPINDir+0x4a>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_vsetPINDir+0x46>
 164:	ba 01       	movw	r22, r20
 166:	60 95       	com	r22
 168:	62 23       	and	r22, r18
 16a:	6a bb       	out	0x1a, r22	; 26
 16c:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	69 f4       	brne	.+26     	; 0x18c <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 172:	27 b3       	in	r18, 0x17	; 23
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_vsetPINDir+0x6a>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_vsetPINDir+0x66>
 184:	ba 01       	movw	r22, r20
 186:	62 2b       	or	r22, r18
 188:	67 bb       	out	0x17, r22	; 23
 18a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 18c:	27 b3       	in	r18, 0x17	; 23
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_vsetPINDir+0x84>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_vsetPINDir+0x80>
 19e:	ba 01       	movw	r22, r20
 1a0:	60 95       	com	r22
 1a2:	62 23       	and	r22, r18
 1a4:	67 bb       	out	0x17, r22	; 23
 1a6:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 1ac:	24 b3       	in	r18, 0x14	; 20
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ac 01       	movw	r20, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_vsetPINDir+0xa4>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_vsetPINDir+0xa0>
 1be:	ba 01       	movw	r22, r20
 1c0:	62 2b       	or	r22, r18
 1c2:	64 bb       	out	0x14, r22	; 20
 1c4:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 1c6:	24 b3       	in	r18, 0x14	; 20
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ac 01       	movw	r20, r24
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_vsetPINDir+0xbe>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_vsetPINDir+0xba>
 1d8:	ba 01       	movw	r22, r20
 1da:	60 95       	com	r22
 1dc:	62 23       	and	r22, r18
 1de:	64 bb       	out	0x14, r22	; 20
 1e0:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	69 f4       	brne	.+26     	; 0x200 <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 1e6:	21 b3       	in	r18, 0x11	; 17
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	ac 01       	movw	r20, r24
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_vsetPINDir+0xde>
 1f0:	44 0f       	add	r20, r20
 1f2:	55 1f       	adc	r21, r21
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_vsetPINDir+0xda>
 1f8:	ba 01       	movw	r22, r20
 1fa:	62 2b       	or	r22, r18
 1fc:	61 bb       	out	0x11, r22	; 17
 1fe:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 200:	21 b3       	in	r18, 0x11	; 17
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_vsetPINDir+0xf8>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_vsetPINDir+0xf4>
 212:	ba 01       	movw	r22, r20
 214:	60 95       	com	r22
 216:	62 23       	and	r22, r18
 218:	61 bb       	out	0x11, r22	; 17
 21a:	08 95       	ret

0000021c <DIO_write>:
}


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
	switch(portname)
 21c:	82 34       	cpi	r24, 0x42	; 66
 21e:	51 f1       	breq	.+84     	; 0x274 <DIO_write+0x58>
 220:	83 34       	cpi	r24, 0x43	; 67
 222:	20 f4       	brcc	.+8      	; 0x22c <DIO_write+0x10>
 224:	81 34       	cpi	r24, 0x41	; 65
 226:	09 f0       	breq	.+2      	; 0x22a <DIO_write+0xe>
 228:	7b c0       	rjmp	.+246    	; 0x320 <DIO_write+0x104>
 22a:	07 c0       	rjmp	.+14     	; 0x23a <DIO_write+0x1e>
 22c:	83 34       	cpi	r24, 0x43	; 67
 22e:	09 f4       	brne	.+2      	; 0x232 <DIO_write+0x16>
 230:	3e c0       	rjmp	.+124    	; 0x2ae <DIO_write+0x92>
 232:	84 34       	cpi	r24, 0x44	; 68
 234:	09 f0       	breq	.+2      	; 0x238 <DIO_write+0x1c>
 236:	74 c0       	rjmp	.+232    	; 0x320 <DIO_write+0x104>
 238:	57 c0       	rjmp	.+174    	; 0x2e8 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	69 f4       	brne	.+26     	; 0x258 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 23e:	2b b3       	in	r18, 0x1b	; 27
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ac 01       	movw	r20, r24
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_write+0x30>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_write+0x2c>
 250:	ba 01       	movw	r22, r20
 252:	62 2b       	or	r22, r18
 254:	6b bb       	out	0x1b, r22	; 27
 256:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 258:	2b b3       	in	r18, 0x1b	; 27
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	ac 01       	movw	r20, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_write+0x4a>
 262:	44 0f       	add	r20, r20
 264:	55 1f       	adc	r21, r21
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_write+0x46>
 26a:	ba 01       	movw	r22, r20
 26c:	60 95       	com	r22
 26e:	62 23       	and	r22, r18
 270:	6b bb       	out	0x1b, r22	; 27
 272:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 274:	41 30       	cpi	r20, 0x01	; 1
 276:	69 f4       	brne	.+26     	; 0x292 <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 278:	28 b3       	in	r18, 0x18	; 24
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	ac 01       	movw	r20, r24
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_write+0x6a>
 282:	44 0f       	add	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_write+0x66>
 28a:	ba 01       	movw	r22, r20
 28c:	62 2b       	or	r22, r18
 28e:	68 bb       	out	0x18, r22	; 24
 290:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 292:	28 b3       	in	r18, 0x18	; 24
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	ac 01       	movw	r20, r24
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_write+0x84>
 29c:	44 0f       	add	r20, r20
 29e:	55 1f       	adc	r21, r21
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_write+0x80>
 2a4:	ba 01       	movw	r22, r20
 2a6:	60 95       	com	r22
 2a8:	62 23       	and	r22, r18
 2aa:	68 bb       	out	0x18, r22	; 24
 2ac:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 2ae:	41 30       	cpi	r20, 0x01	; 1
 2b0:	69 f4       	brne	.+26     	; 0x2cc <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 2b2:	25 b3       	in	r18, 0x15	; 21
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	ac 01       	movw	r20, r24
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_write+0xa4>
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_write+0xa0>
 2c4:	ba 01       	movw	r22, r20
 2c6:	62 2b       	or	r22, r18
 2c8:	65 bb       	out	0x15, r22	; 21
 2ca:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 2cc:	25 b3       	in	r18, 0x15	; 21
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	ac 01       	movw	r20, r24
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_write+0xbe>
 2d6:	44 0f       	add	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_write+0xba>
 2de:	ba 01       	movw	r22, r20
 2e0:	60 95       	com	r22
 2e2:	62 23       	and	r22, r18
 2e4:	65 bb       	out	0x15, r22	; 21
 2e6:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 2e8:	41 30       	cpi	r20, 0x01	; 1
 2ea:	69 f4       	brne	.+26     	; 0x306 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 2ec:	22 b3       	in	r18, 0x12	; 18
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	ac 01       	movw	r20, r24
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_write+0xde>
 2f6:	44 0f       	add	r20, r20
 2f8:	55 1f       	adc	r21, r21
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_write+0xda>
 2fe:	ba 01       	movw	r22, r20
 300:	62 2b       	or	r22, r18
 302:	62 bb       	out	0x12, r22	; 18
 304:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 306:	22 b3       	in	r18, 0x12	; 18
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	ac 01       	movw	r20, r24
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_write+0xf8>
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_write+0xf4>
 318:	ba 01       	movw	r22, r20
 31a:	60 95       	com	r22
 31c:	62 23       	and	r22, r18
 31e:	62 bb       	out	0x12, r22	; 18
 320:	08 95       	ret

00000322 <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
	switch(portname)
 322:	82 34       	cpi	r24, 0x42	; 66
 324:	f1 f0       	breq	.+60     	; 0x362 <DIO_u8read+0x40>
 326:	83 34       	cpi	r24, 0x43	; 67
 328:	20 f4       	brcc	.+8      	; 0x332 <DIO_u8read+0x10>
 32a:	81 34       	cpi	r24, 0x41	; 65
 32c:	09 f0       	breq	.+2      	; 0x330 <DIO_u8read+0xe>
 32e:	4f c0       	rjmp	.+158    	; 0x3ce <DIO_u8read+0xac>
 330:	06 c0       	rjmp	.+12     	; 0x33e <DIO_u8read+0x1c>
 332:	83 34       	cpi	r24, 0x43	; 67
 334:	41 f1       	breq	.+80     	; 0x386 <DIO_u8read+0x64>
 336:	84 34       	cpi	r24, 0x44	; 68
 338:	09 f0       	breq	.+2      	; 0x33c <DIO_u8read+0x1a>
 33a:	49 c0       	rjmp	.+146    	; 0x3ce <DIO_u8read+0xac>
 33c:	36 c0       	rjmp	.+108    	; 0x3aa <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
 33e:	29 b3       	in	r18, 0x19	; 25
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	06 2e       	mov	r0, r22
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_u8read+0x2a>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_u8read+0x26>
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	82 23       	and	r24, r18
 354:	93 23       	and	r25, r19
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_u8read+0x3a>
 358:	95 95       	asr	r25
 35a:	87 95       	ror	r24
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_u8read+0x36>
		break;
 360:	08 95       	ret
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
 362:	26 b3       	in	r18, 0x16	; 22
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	06 2e       	mov	r0, r22
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8read+0x4e>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8read+0x4a>
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	82 23       	and	r24, r18
 378:	93 23       	and	r25, r19
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_u8read+0x5e>
 37c:	95 95       	asr	r25
 37e:	87 95       	ror	r24
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_u8read+0x5a>
		break;
 384:	08 95       	ret
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
 386:	23 b3       	in	r18, 0x13	; 19
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	06 2e       	mov	r0, r22
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8read+0x72>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8read+0x6e>
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	82 23       	and	r24, r18
 39c:	93 23       	and	r25, r19
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_u8read+0x82>
 3a0:	95 95       	asr	r25
 3a2:	87 95       	ror	r24
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_u8read+0x7e>
		break;
 3a8:	08 95       	ret
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
 3aa:	20 b3       	in	r18, 0x10	; 16
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	06 2e       	mov	r0, r22
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_u8read+0x96>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_u8read+0x92>
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	82 23       	and	r24, r18
 3c0:	93 23       	and	r25, r19
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_u8read+0xa6>
 3c4:	95 95       	asr	r25
 3c6:	87 95       	ror	r24
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_u8read+0xa2>
		break;
 3cc:	08 95       	ret
}


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
		break;
		default: break;
	}
	return return_value ;
}
 3d0:	08 95       	ret

000003d2 <DIO_toggle>:
void DIO_toggle(uint8 portname,uint8 pinnumber)
{
	switch(portname)
 3d2:	82 34       	cpi	r24, 0x42	; 66
 3d4:	b9 f0       	breq	.+46     	; 0x404 <DIO_toggle+0x32>
 3d6:	83 34       	cpi	r24, 0x43	; 67
 3d8:	18 f4       	brcc	.+6      	; 0x3e0 <DIO_toggle+0xe>
 3da:	81 34       	cpi	r24, 0x41	; 65
 3dc:	c9 f5       	brne	.+114    	; 0x450 <DIO_toggle+0x7e>
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <DIO_toggle+0x18>
 3e0:	83 34       	cpi	r24, 0x43	; 67
 3e2:	e9 f0       	breq	.+58     	; 0x41e <DIO_toggle+0x4c>
 3e4:	84 34       	cpi	r24, 0x44	; 68
 3e6:	a1 f5       	brne	.+104    	; 0x450 <DIO_toggle+0x7e>
 3e8:	27 c0       	rjmp	.+78     	; 0x438 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 3ea:	2b b3       	in	r18, 0x1b	; 27
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	ac 01       	movw	r20, r24
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_toggle+0x26>
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_toggle+0x22>
 3fc:	ba 01       	movw	r22, r20
 3fe:	62 27       	eor	r22, r18
 400:	6b bb       	out	0x1b, r22	; 27
		break;
 402:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 404:	28 b3       	in	r18, 0x18	; 24
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	ac 01       	movw	r20, r24
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_toggle+0x40>
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_toggle+0x3c>
 416:	ba 01       	movw	r22, r20
 418:	62 27       	eor	r22, r18
 41a:	68 bb       	out	0x18, r22	; 24
		break;
 41c:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 41e:	25 b3       	in	r18, 0x15	; 21
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	ac 01       	movw	r20, r24
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_toggle+0x5a>
 428:	44 0f       	add	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_toggle+0x56>
 430:	ba 01       	movw	r22, r20
 432:	62 27       	eor	r22, r18
 434:	65 bb       	out	0x15, r22	; 21
		break;
 436:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 438:	22 b3       	in	r18, 0x12	; 18
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	ac 01       	movw	r20, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_toggle+0x74>
 442:	44 0f       	add	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_toggle+0x70>
 44a:	ba 01       	movw	r22, r20
 44c:	62 27       	eor	r22, r18
 44e:	62 bb       	out	0x12, r22	; 18
 450:	08 95       	ret

00000452 <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(uint8 portname,uint8 portvalue)
{
	switch(portname)
 452:	82 34       	cpi	r24, 0x42	; 66
 454:	61 f0       	breq	.+24     	; 0x46e <DIO_write_port+0x1c>
 456:	83 34       	cpi	r24, 0x43	; 67
 458:	18 f4       	brcc	.+6      	; 0x460 <DIO_write_port+0xe>
 45a:	81 34       	cpi	r24, 0x41	; 65
 45c:	69 f4       	brne	.+26     	; 0x478 <DIO_write_port+0x26>
 45e:	05 c0       	rjmp	.+10     	; 0x46a <DIO_write_port+0x18>
 460:	83 34       	cpi	r24, 0x43	; 67
 462:	39 f0       	breq	.+14     	; 0x472 <DIO_write_port+0x20>
 464:	84 34       	cpi	r24, 0x44	; 68
 466:	41 f4       	brne	.+16     	; 0x478 <DIO_write_port+0x26>
 468:	06 c0       	rjmp	.+12     	; 0x476 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 46a:	6b bb       	out	0x1b, r22	; 27
		break ;
 46c:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 46e:	68 bb       	out	0x18, r22	; 24
		break ;
 470:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 472:	65 bb       	out	0x15, r22	; 21
		break ;
 474:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 476:	62 bb       	out	0x12, r22	; 18
 478:	08 95       	ret

0000047a <dio_write_highnibble>:
		default: break ;
	}
}
void dio_write_highnibble(uint8 portname,uint8 value)
{
	switch(portname)
 47a:	82 34       	cpi	r24, 0x42	; 66
 47c:	79 f0       	breq	.+30     	; 0x49c <dio_write_highnibble+0x22>
 47e:	83 34       	cpi	r24, 0x43	; 67
 480:	18 f4       	brcc	.+6      	; 0x488 <dio_write_highnibble+0xe>
 482:	81 34       	cpi	r24, 0x41	; 65
 484:	c9 f4       	brne	.+50     	; 0x4b8 <dio_write_highnibble+0x3e>
 486:	05 c0       	rjmp	.+10     	; 0x492 <dio_write_highnibble+0x18>
 488:	83 34       	cpi	r24, 0x43	; 67
 48a:	69 f0       	breq	.+26     	; 0x4a6 <dio_write_highnibble+0x2c>
 48c:	84 34       	cpi	r24, 0x44	; 68
 48e:	a1 f4       	brne	.+40     	; 0x4b8 <dio_write_highnibble+0x3e>
 490:	0f c0       	rjmp	.+30     	; 0x4b0 <dio_write_highnibble+0x36>
	{
		case 'A' :
		PORTA|=(value&0xf0);//Set only the high nibble of the port A by the given value
 492:	8b b3       	in	r24, 0x1b	; 27
 494:	60 7f       	andi	r22, 0xF0	; 240
 496:	68 2b       	or	r22, r24
 498:	6b bb       	out	0x1b, r22	; 27
		break ;
 49a:	08 95       	ret
		case 'B':
		PORTB|=(value&0xf0);//Set only the high nibble of the port B by the given value
 49c:	88 b3       	in	r24, 0x18	; 24
 49e:	60 7f       	andi	r22, 0xF0	; 240
 4a0:	68 2b       	or	r22, r24
 4a2:	68 bb       	out	0x18, r22	; 24
		break ;
 4a4:	08 95       	ret
		case 'C' :
		PORTC|=(value&0xf0);//Set only the high nibble of the port C by the given value
 4a6:	85 b3       	in	r24, 0x15	; 21
 4a8:	60 7f       	andi	r22, 0xF0	; 240
 4aa:	68 2b       	or	r22, r24
 4ac:	65 bb       	out	0x15, r22	; 21
		break ;
 4ae:	08 95       	ret
		case 'D':
		PORTD|=(value&0xf0);//Set only the high nibble of the port D by the given value
 4b0:	82 b3       	in	r24, 0x12	; 18
 4b2:	60 7f       	andi	r22, 0xF0	; 240
 4b4:	68 2b       	or	r22, r24
 4b6:	62 bb       	out	0x12, r22	; 18
 4b8:	08 95       	ret

000004ba <clear_high_nibble>:
	}
}

void clear_high_nibble(uint8 portname)
{
	switch(portname)
 4ba:	82 34       	cpi	r24, 0x42	; 66
 4bc:	71 f0       	breq	.+28     	; 0x4da <clear_high_nibble+0x20>
 4be:	83 34       	cpi	r24, 0x43	; 67
 4c0:	18 f4       	brcc	.+6      	; 0x4c8 <clear_high_nibble+0xe>
 4c2:	81 34       	cpi	r24, 0x41	; 65
 4c4:	a9 f4       	brne	.+42     	; 0x4f0 <clear_high_nibble+0x36>
 4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <clear_high_nibble+0x18>
 4c8:	83 34       	cpi	r24, 0x43	; 67
 4ca:	59 f0       	breq	.+22     	; 0x4e2 <clear_high_nibble+0x28>
 4cc:	84 34       	cpi	r24, 0x44	; 68
 4ce:	81 f4       	brne	.+32     	; 0x4f0 <clear_high_nibble+0x36>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <clear_high_nibble+0x30>
	{
		case 'A' :
		PORTA&=0x0f;//set the value of the high nibble of the port A as low
 4d2:	8b b3       	in	r24, 0x1b	; 27
 4d4:	8f 70       	andi	r24, 0x0F	; 15
 4d6:	8b bb       	out	0x1b, r24	; 27
		break ;
 4d8:	08 95       	ret
		case 'B':
		PORTB&=0x0f;//set the value of the high nibble of the port B as low
 4da:	88 b3       	in	r24, 0x18	; 24
 4dc:	8f 70       	andi	r24, 0x0F	; 15
 4de:	88 bb       	out	0x18, r24	; 24
		break ;
 4e0:	08 95       	ret
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
 4e2:	85 b3       	in	r24, 0x15	; 21
 4e4:	8f 70       	andi	r24, 0x0F	; 15
 4e6:	85 bb       	out	0x15, r24	; 21
		break ;
 4e8:	08 95       	ret
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
 4ea:	82 b3       	in	r24, 0x12	; 18
 4ec:	8f 70       	andi	r24, 0x0F	; 15
 4ee:	82 bb       	out	0x12, r24	; 18
 4f0:	08 95       	ret

000004f2 <DIO_vconnectpullup>:
	}
}

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
	switch(portname)
 4f2:	82 34       	cpi	r24, 0x42	; 66
 4f4:	91 f1       	breq	.+100    	; 0x55a <DIO_vconnectpullup+0x68>
 4f6:	83 34       	cpi	r24, 0x43	; 67
 4f8:	20 f4       	brcc	.+8      	; 0x502 <DIO_vconnectpullup+0x10>
 4fa:	81 34       	cpi	r24, 0x41	; 65
 4fc:	09 f0       	breq	.+2      	; 0x500 <DIO_vconnectpullup+0xe>
 4fe:	9b c0       	rjmp	.+310    	; 0x636 <DIO_vconnectpullup+0x144>
 500:	07 c0       	rjmp	.+14     	; 0x510 <DIO_vconnectpullup+0x1e>
 502:	83 34       	cpi	r24, 0x43	; 67
 504:	09 f4       	brne	.+2      	; 0x508 <DIO_vconnectpullup+0x16>
 506:	4e c0       	rjmp	.+156    	; 0x5a4 <DIO_vconnectpullup+0xb2>
 508:	84 34       	cpi	r24, 0x44	; 68
 50a:	09 f0       	breq	.+2      	; 0x50e <DIO_vconnectpullup+0x1c>
 50c:	94 c0       	rjmp	.+296    	; 0x636 <DIO_vconnectpullup+0x144>
 50e:	6f c0       	rjmp	.+222    	; 0x5ee <DIO_vconnectpullup+0xfc>
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
 510:	41 30       	cpi	r20, 0x01	; 1
 512:	a9 f4       	brne	.+42     	; 0x53e <DIO_vconnectpullup+0x4c>
		{
			CLR_BIT(SFIOR,PUD);
 514:	80 b7       	in	r24, 0x30	; 48
 516:	8b 7f       	andi	r24, 0xFB	; 251
 518:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRA,pinnumber);
 51a:	2a b3       	in	r18, 0x1a	; 26
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ac 01       	movw	r20, r24
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectpullup+0x36>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectpullup+0x32>
 52c:	ba 01       	movw	r22, r20
 52e:	84 2f       	mov	r24, r20
 530:	80 95       	com	r24
 532:	82 23       	and	r24, r18
 534:	8a bb       	out	0x1a, r24	; 26
			SET_BIT(PORTA,pinnumber);
 536:	8b b3       	in	r24, 0x1b	; 27
 538:	68 2b       	or	r22, r24
 53a:	6b bb       	out	0x1b, r22	; 27
 53c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 53e:	2b b3       	in	r18, 0x1b	; 27
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	ac 01       	movw	r20, r24
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_vconnectpullup+0x5a>
 548:	44 0f       	add	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_vconnectpullup+0x56>
 550:	ba 01       	movw	r22, r20
 552:	60 95       	com	r22
 554:	62 23       	and	r22, r18
 556:	6b bb       	out	0x1b, r22	; 27
 558:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
 55a:	41 30       	cpi	r20, 0x01	; 1
 55c:	a9 f4       	brne	.+42     	; 0x588 <DIO_vconnectpullup+0x96>
		{
			CLR_BIT(SFIOR,PUD);
 55e:	80 b7       	in	r24, 0x30	; 48
 560:	8b 7f       	andi	r24, 0xFB	; 251
 562:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRB,pinnumber);
 564:	27 b3       	in	r18, 0x17	; 23
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	ac 01       	movw	r20, r24
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_vconnectpullup+0x80>
 56e:	44 0f       	add	r20, r20
 570:	55 1f       	adc	r21, r21
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_vconnectpullup+0x7c>
 576:	ba 01       	movw	r22, r20
 578:	84 2f       	mov	r24, r20
 57a:	80 95       	com	r24
 57c:	82 23       	and	r24, r18
 57e:	87 bb       	out	0x17, r24	; 23
			SET_BIT(PORTB,pinnumber);
 580:	88 b3       	in	r24, 0x18	; 24
 582:	68 2b       	or	r22, r24
 584:	68 bb       	out	0x18, r22	; 24
 586:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 588:	28 b3       	in	r18, 0x18	; 24
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	ac 01       	movw	r20, r24
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_vconnectpullup+0xa4>
 592:	44 0f       	add	r20, r20
 594:	55 1f       	adc	r21, r21
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_vconnectpullup+0xa0>
 59a:	ba 01       	movw	r22, r20
 59c:	60 95       	com	r22
 59e:	62 23       	and	r22, r18
 5a0:	68 bb       	out	0x18, r22	; 24
 5a2:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
 5a4:	41 30       	cpi	r20, 0x01	; 1
 5a6:	a9 f4       	brne	.+42     	; 0x5d2 <DIO_vconnectpullup+0xe0>
		{
			CLR_BIT(SFIOR,PUD);
 5a8:	80 b7       	in	r24, 0x30	; 48
 5aa:	8b 7f       	andi	r24, 0xFB	; 251
 5ac:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRC,pinnumber);
 5ae:	24 b3       	in	r18, 0x14	; 20
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	ac 01       	movw	r20, r24
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_vconnectpullup+0xca>
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_vconnectpullup+0xc6>
 5c0:	ba 01       	movw	r22, r20
 5c2:	84 2f       	mov	r24, r20
 5c4:	80 95       	com	r24
 5c6:	82 23       	and	r24, r18
 5c8:	84 bb       	out	0x14, r24	; 20
			SET_BIT(PORTC,pinnumber);
 5ca:	85 b3       	in	r24, 0x15	; 21
 5cc:	68 2b       	or	r22, r24
 5ce:	65 bb       	out	0x15, r22	; 21
 5d0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 5d2:	25 b3       	in	r18, 0x15	; 21
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	ac 01       	movw	r20, r24
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_vconnectpullup+0xee>
 5dc:	44 0f       	add	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_vconnectpullup+0xea>
 5e4:	ba 01       	movw	r22, r20
 5e6:	60 95       	com	r22
 5e8:	62 23       	and	r22, r18
 5ea:	65 bb       	out	0x15, r22	; 21
 5ec:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
 5ee:	41 30       	cpi	r20, 0x01	; 1
 5f0:	a9 f4       	brne	.+42     	; 0x61c <DIO_vconnectpullup+0x12a>
		{
			CLR_BIT(SFIOR,PUD);
 5f2:	80 b7       	in	r24, 0x30	; 48
 5f4:	8b 7f       	andi	r24, 0xFB	; 251
 5f6:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRD,pinnumber);
 5f8:	21 b3       	in	r18, 0x11	; 17
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	ac 01       	movw	r20, r24
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_vconnectpullup+0x114>
 602:	44 0f       	add	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_vconnectpullup+0x110>
 60a:	ba 01       	movw	r22, r20
 60c:	84 2f       	mov	r24, r20
 60e:	80 95       	com	r24
 610:	82 23       	and	r24, r18
 612:	81 bb       	out	0x11, r24	; 17
			SET_BIT(PORTD,pinnumber);
 614:	82 b3       	in	r24, 0x12	; 18
 616:	68 2b       	or	r22, r24
 618:	62 bb       	out	0x12, r22	; 18
 61a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 61c:	22 b3       	in	r18, 0x12	; 18
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	ac 01       	movw	r20, r24
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_vconnectpullup+0x138>
 626:	44 0f       	add	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_vconnectpullup+0x134>
 62e:	ba 01       	movw	r22, r20
 630:	60 95       	com	r22
 632:	62 23       	and	r22, r18
 634:	62 bb       	out	0x12, r22	; 18
 636:	08 95       	ret

00000638 <LED_vInit>:
*  Author: Mohamed Zaghlol
*/
#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
 638:	41 e0       	ldi	r20, 0x01	; 1
 63a:	0e 94 8b 00 	call	0x116	; 0x116 <DIO_vsetPINDir>
}
 63e:	08 95       	ret

00000640 <LED_vTurnOn>:
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 640:	41 e0       	ldi	r20, 0x01	; 1
 642:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_write>
}
 646:	08 95       	ret

00000648 <LED_vTurnOff>:
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_write>
}
 64e:	08 95       	ret

00000650 <LED_vToggle>:
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 650:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <DIO_toggle>
}
 654:	08 95       	ret

00000656 <LED_u8ReadStatus>:
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
 656:	0e 94 91 01 	call	0x322	; 0x322 <DIO_u8read>
}
 65a:	08 95       	ret

0000065c <main>:
volatile uint8 counter=0; // the counter which determine the periodic time of implementing ISR
volatile uint8 last_air_conditioning_value=AIR_CONDTIONING_OFF; // last air conditioning value which will help in hysteresis

int main(void)
{
	ADC_vinit();//initialize the ADC of the micro controller
 65c:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_vinit>
	timer0_initializeCTC();//Initialize the timer zero of the micro controller
 660:	0e 94 b8 04 	call	0x970	; 0x970 <timer0_initializeCTC>
	SPI_vInitSlave();//initialize the SPI as a slave
 664:	0e 94 b0 04 	call	0x960	; 0x960 <SPI_vInitSlave>
	
	/* initialization of output pins of connected leds or devices */
	LED_vInit(AIR_COND_PORT,AIR_COND_PIN);
 668:	84 e4       	ldi	r24, 0x44	; 68
 66a:	62 e0       	ldi	r22, 0x02	; 2
 66c:	0e 94 1c 03 	call	0x638	; 0x638 <LED_vInit>
	LED_vInit(TV_PORT,TV_PIN);
 670:	84 e4       	ldi	r24, 0x44	; 68
 672:	63 e0       	ldi	r22, 0x03	; 3
 674:	0e 94 1c 03 	call	0x638	; 0x638 <LED_vInit>
	LED_vInit(ROOM1_PORT,ROOM1_PIN);
 678:	84 e4       	ldi	r24, 0x44	; 68
 67a:	64 e0       	ldi	r22, 0x04	; 4
 67c:	0e 94 1c 03 	call	0x638	; 0x638 <LED_vInit>
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
 680:	84 e4       	ldi	r24, 0x44	; 68
 682:	65 e0       	ldi	r22, 0x05	; 5
 684:	0e 94 1c 03 	call	0x638	; 0x638 <LED_vInit>
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
 688:	84 e4       	ldi	r24, 0x44	; 68
 68a:	66 e0       	ldi	r22, 0x06	; 6
 68c:	0e 94 1c 03 	call	0x638	; 0x638 <LED_vInit>
	LED_vInit(ROOM4_PORT,ROOM4_PIN);
 690:	84 e4       	ldi	r24, 0x44	; 68
 692:	67 e0       	ldi	r22, 0x07	; 7
 694:	0e 94 1c 03 	call	0x638	; 0x638 <LED_vInit>
	
	uint8 request = DEFAULT_ACK;//the value that is received from the master
	uint8 response = DEFAULT_ACK;//the values that is sent back to the master
 698:	cf ef       	ldi	r28, 0xFF	; 255
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;
			case TV_STATUS:
			if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 69a:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 69c:	11 e0       	ldi	r17, 0x01	; 1
	uint8 request = DEFAULT_ACK;//the value that is received from the master
	uint8 response = DEFAULT_ACK;//the values that is sent back to the master
	
	while(1)
	{
		request = SPI_ui8TransmitRecive(DEFAULT_ACK);//wait for the master to start the transmitting
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	0e 94 b3 04 	call	0x966	; 0x966 <SPI_ui8TransmitRecive>
		//ALL Messages are defined in STD_messages.h
		switch (request)
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	41 97       	sbiw	r24, 0x11	; 17
 6a8:	80 33       	cpi	r24, 0x30	; 48
 6aa:	91 05       	cpc	r25, r1
 6ac:	c0 f7       	brcc	.-16     	; 0x69e <main+0x42>
 6ae:	86 5d       	subi	r24, 0xD6	; 214
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	fc 01       	movw	r30, r24
 6b4:	ee 0f       	add	r30, r30
 6b6:	ff 1f       	adc	r31, r31
 6b8:	05 90       	lpm	r0, Z+
 6ba:	f4 91       	lpm	r31, Z
 6bc:	e0 2d       	mov	r30, r0
 6be:	09 94       	ijmp
		{
			/*********************************   STATUS COMMANDS ********************************/
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
 6c0:	84 e4       	ldi	r24, 0x44	; 68
 6c2:	64 e0       	ldi	r22, 0x04	; 4
 6c4:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 6c8:	88 23       	and	r24, r24
 6ca:	39 f0       	breq	.+14     	; 0x6da <main+0x7e>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
 6cc:	84 e4       	ldi	r24, 0x44	; 68
 6ce:	64 e0       	ldi	r22, 0x04	; 4
 6d0:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 6d4:	81 30       	cpi	r24, 0x01	; 1
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <main+0x84>
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <main+0x82>
			/*********************************   STATUS COMMANDS ********************************/
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 6da:	cd 2f       	mov	r28, r29
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <main+0x84>
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 6de:	c1 2f       	mov	r28, r17
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 6e0:	8c 2f       	mov	r24, r28
 6e2:	0e 94 b3 04 	call	0x966	; 0x966 <SPI_ui8TransmitRecive>
			break;//break the switch case
 6e6:	db cf       	rjmp	.-74     	; 0x69e <main+0x42>
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
 6e8:	84 e4       	ldi	r24, 0x44	; 68
 6ea:	65 e0       	ldi	r22, 0x05	; 5
 6ec:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 6f0:	88 23       	and	r24, r24
 6f2:	39 f0       	breq	.+14     	; 0x702 <main+0xa6>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
 6f4:	84 e4       	ldi	r24, 0x44	; 68
 6f6:	65 e0       	ldi	r22, 0x05	; 5
 6f8:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	21 f4       	brne	.+8      	; 0x708 <main+0xac>
 700:	02 c0       	rjmp	.+4      	; 0x706 <main+0xaa>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 702:	cd 2f       	mov	r28, r29
 704:	01 c0       	rjmp	.+2      	; 0x708 <main+0xac>
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 706:	c1 2f       	mov	r28, r17
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 708:	8c 2f       	mov	r24, r28
 70a:	0e 94 b3 04 	call	0x966	; 0x966 <SPI_ui8TransmitRecive>
			break;//break the switch case
 70e:	c7 cf       	rjmp	.-114    	; 0x69e <main+0x42>
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
 710:	84 e4       	ldi	r24, 0x44	; 68
 712:	66 e0       	ldi	r22, 0x06	; 6
 714:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 718:	88 23       	and	r24, r24
 71a:	39 f0       	breq	.+14     	; 0x72a <main+0xce>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
 71c:	84 e4       	ldi	r24, 0x44	; 68
 71e:	66 e0       	ldi	r22, 0x06	; 6
 720:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 724:	81 30       	cpi	r24, 0x01	; 1
 726:	21 f4       	brne	.+8      	; 0x730 <main+0xd4>
 728:	02 c0       	rjmp	.+4      	; 0x72e <main+0xd2>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 72a:	cd 2f       	mov	r28, r29
 72c:	01 c0       	rjmp	.+2      	; 0x730 <main+0xd4>
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 72e:	c1 2f       	mov	r28, r17
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 730:	8c 2f       	mov	r24, r28
 732:	0e 94 b3 04 	call	0x966	; 0x966 <SPI_ui8TransmitRecive>
			break;//break the switch case
 736:	b3 cf       	rjmp	.-154    	; 0x69e <main+0x42>
			case ROOM4_STATUS:
			if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==0)//if the led is turned off
 738:	84 e4       	ldi	r24, 0x44	; 68
 73a:	67 e0       	ldi	r22, 0x07	; 7
 73c:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 740:	88 23       	and	r24, r24
 742:	39 f0       	breq	.+14     	; 0x752 <main+0xf6>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==1)//if the led is turned on
 744:	84 e4       	ldi	r24, 0x44	; 68
 746:	67 e0       	ldi	r22, 0x07	; 7
 748:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	21 f4       	brne	.+8      	; 0x758 <main+0xfc>
 750:	02 c0       	rjmp	.+4      	; 0x756 <main+0xfa>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM4_STATUS:
			if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 752:	cd 2f       	mov	r28, r29
 754:	01 c0       	rjmp	.+2      	; 0x758 <main+0xfc>
			}
			else if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 756:	c1 2f       	mov	r28, r17
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 758:	8c 2f       	mov	r24, r28
 75a:	0e 94 b3 04 	call	0x966	; 0x966 <SPI_ui8TransmitRecive>
			break;//break the switch case
 75e:	9f cf       	rjmp	.-194    	; 0x69e <main+0x42>
			case AIR_COND_STATUS:
			if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==0)//if the led is turned off
 760:	84 e4       	ldi	r24, 0x44	; 68
 762:	62 e0       	ldi	r22, 0x02	; 2
 764:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 768:	88 23       	and	r24, r24
 76a:	39 f0       	breq	.+14     	; 0x77a <main+0x11e>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==1)//if the led is turned on
 76c:	84 e4       	ldi	r24, 0x44	; 68
 76e:	62 e0       	ldi	r22, 0x02	; 2
 770:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	21 f4       	brne	.+8      	; 0x780 <main+0x124>
 778:	02 c0       	rjmp	.+4      	; 0x77e <main+0x122>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case AIR_COND_STATUS:
			if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 77a:	cd 2f       	mov	r28, r29
 77c:	01 c0       	rjmp	.+2      	; 0x780 <main+0x124>
			}
			else if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 77e:	c1 2f       	mov	r28, r17
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 780:	8c 2f       	mov	r24, r28
 782:	0e 94 b3 04 	call	0x966	; 0x966 <SPI_ui8TransmitRecive>
			break;
 786:	8b cf       	rjmp	.-234    	; 0x69e <main+0x42>
			case TV_STATUS:
			if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
 788:	84 e4       	ldi	r24, 0x44	; 68
 78a:	63 e0       	ldi	r22, 0x03	; 3
 78c:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 790:	88 23       	and	r24, r24
 792:	39 f0       	breq	.+14     	; 0x7a2 <main+0x146>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
 794:	84 e4       	ldi	r24, 0x44	; 68
 796:	63 e0       	ldi	r22, 0x03	; 3
 798:	0e 94 2b 03 	call	0x656	; 0x656 <LED_u8ReadStatus>
 79c:	81 30       	cpi	r24, 0x01	; 1
 79e:	21 f4       	brne	.+8      	; 0x7a8 <main+0x14c>
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <main+0x14a>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;
			case TV_STATUS:
			if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 7a2:	cd 2f       	mov	r28, r29
 7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <main+0x14c>
			}
			else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 7a6:	c1 2f       	mov	r28, r17
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 7a8:	8c 2f       	mov	r24, r28
 7aa:	0e 94 b3 04 	call	0x966	; 0x966 <SPI_ui8TransmitRecive>
			break;//break the switch case
 7ae:	77 cf       	rjmp	.-274    	; 0x69e <main+0x42>
			
			/*********************************   TURN ON COMMANDS ********************************/
			case ROOM1_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM1_PIN);//turn on the led of room 1
 7b0:	84 e4       	ldi	r24, 0x44	; 68
 7b2:	64 e0       	ldi	r22, 0x04	; 4
 7b4:	0e 94 20 03 	call	0x640	; 0x640 <LED_vTurnOn>
			break;//break the switch case
 7b8:	72 cf       	rjmp	.-284    	; 0x69e <main+0x42>
			case ROOM2_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM2_PIN);//turn on the led of room 2
 7ba:	84 e4       	ldi	r24, 0x44	; 68
 7bc:	65 e0       	ldi	r22, 0x05	; 5
 7be:	0e 94 20 03 	call	0x640	; 0x640 <LED_vTurnOn>
			break;//break the switch case
 7c2:	6d cf       	rjmp	.-294    	; 0x69e <main+0x42>
			case ROOM3_TURN_ON:
			LED_vTurnOn(ROOM3_PORT,ROOM3_PIN);//turn on the led of room 3
 7c4:	84 e4       	ldi	r24, 0x44	; 68
 7c6:	66 e0       	ldi	r22, 0x06	; 6
 7c8:	0e 94 20 03 	call	0x640	; 0x640 <LED_vTurnOn>
			break;//break the switch case
 7cc:	68 cf       	rjmp	.-304    	; 0x69e <main+0x42>
			case ROOM4_TURN_ON:
			LED_vTurnOn(ROOM4_PORT,ROOM4_PIN);//turn on the led of room 4
 7ce:	84 e4       	ldi	r24, 0x44	; 68
 7d0:	67 e0       	ldi	r22, 0x07	; 7
 7d2:	0e 94 20 03 	call	0x640	; 0x640 <LED_vTurnOn>
			break;//break the switch case
 7d6:	63 cf       	rjmp	.-314    	; 0x69e <main+0x42>
			case AIR_COND_TURN_ON:
			timer0_initializeCTC();
 7d8:	0e 94 b8 04 	call	0x970	; 0x970 <timer0_initializeCTC>
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of air conditioning
 7dc:	84 e4       	ldi	r24, 0x44	; 68
 7de:	62 e0       	ldi	r22, 0x02	; 2
 7e0:	0e 94 20 03 	call	0x640	; 0x640 <LED_vTurnOn>
			break;//break the switch case
 7e4:	5c cf       	rjmp	.-328    	; 0x69e <main+0x42>
			case TV_TURN_ON:
			LED_vTurnOn(TV_PORT,TV_PIN);//turn on the led of the TV
 7e6:	84 e4       	ldi	r24, 0x44	; 68
 7e8:	63 e0       	ldi	r22, 0x03	; 3
 7ea:	0e 94 20 03 	call	0x640	; 0x640 <LED_vTurnOn>
			break;//break the switch case
 7ee:	57 cf       	rjmp	.-338    	; 0x69e <main+0x42>
			
			/*********************************   TURN OFF COMMANDS ********************************/
			case ROOM1_TURN_OFF:
			LED_vTurnOff(ROOM1_PORT,ROOM1_PIN);//turn off the led of room 1
 7f0:	84 e4       	ldi	r24, 0x44	; 68
 7f2:	64 e0       	ldi	r22, 0x04	; 4
 7f4:	0e 94 24 03 	call	0x648	; 0x648 <LED_vTurnOff>
			break;//break the switch case
 7f8:	52 cf       	rjmp	.-348    	; 0x69e <main+0x42>
			case ROOM2_TURN_OFF:
			LED_vTurnOff(ROOM2_PORT,ROOM2_PIN);//turn off the led of room 2
 7fa:	84 e4       	ldi	r24, 0x44	; 68
 7fc:	65 e0       	ldi	r22, 0x05	; 5
 7fe:	0e 94 24 03 	call	0x648	; 0x648 <LED_vTurnOff>
			break;//break the switch case
 802:	4d cf       	rjmp	.-358    	; 0x69e <main+0x42>
			case ROOM3_TURN_OFF:
			LED_vTurnOff(ROOM3_PORT,ROOM3_PIN);//turn off the led of room 3
 804:	84 e4       	ldi	r24, 0x44	; 68
 806:	66 e0       	ldi	r22, 0x06	; 6
 808:	0e 94 24 03 	call	0x648	; 0x648 <LED_vTurnOff>
			break;//break the switch case
 80c:	48 cf       	rjmp	.-368    	; 0x69e <main+0x42>
			case ROOM4_TURN_OFF:
			LED_vTurnOff(ROOM4_PORT,ROOM4_PIN);//turn off the led of room 4
 80e:	84 e4       	ldi	r24, 0x44	; 68
 810:	67 e0       	ldi	r22, 0x07	; 7
 812:	0e 94 24 03 	call	0x648	; 0x648 <LED_vTurnOff>
			break;//break the switch case
 816:	43 cf       	rjmp	.-378    	; 0x69e <main+0x42>
			case AIR_COND_TURN_OFF:
			timer0_stop();
 818:	0e 94 ce 04 	call	0x99c	; 0x99c <timer0_stop>
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of air conditioning
 81c:	84 e4       	ldi	r24, 0x44	; 68
 81e:	62 e0       	ldi	r22, 0x02	; 2
 820:	0e 94 24 03 	call	0x648	; 0x648 <LED_vTurnOff>
			break;//break the switch case
 824:	3c cf       	rjmp	.-392    	; 0x69e <main+0x42>
			case TV_TURN_OFF:
			LED_vTurnOff(TV_PORT,TV_PIN);//turn off the led of the TV
 826:	84 e4       	ldi	r24, 0x44	; 68
 828:	63 e0       	ldi	r22, 0x03	; 3
 82a:	0e 94 24 03 	call	0x648	; 0x648 <LED_vTurnOff>
			break;//break the switch case
 82e:	37 cf       	rjmp	.-402    	; 0x69e <main+0x42>
			
			/*********************************   Set temperature   ********************************/
			case SET_TEMPERATURE:
			required_temperature = SPI_ui8TransmitRecive(DEFAULT_ACK);//get the temperature from the master and store the temperature in required temperature 
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	0e 94 b3 04 	call	0x966	; 0x966 <SPI_ui8TransmitRecive>
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	90 93 61 00 	sts	0x0061, r25
 83c:	80 93 60 00 	sts	0x0060, r24
			break;//break the switch case
 840:	2e cf       	rjmp	.-420    	; 0x69e <main+0x42>

00000842 <__vector_10>:
		}
	}
}

ISR(TIMER0_COMP_vect)
{
 842:	1f 92       	push	r1
 844:	0f 92       	push	r0
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	3f 93       	push	r19
 850:	4f 93       	push	r20
 852:	5f 93       	push	r21
 854:	6f 93       	push	r22
 856:	7f 93       	push	r23
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
 85c:	af 93       	push	r26
 85e:	bf 93       	push	r27
 860:	ef 93       	push	r30
 862:	ff 93       	push	r31
	counter++;//count the ticks of the timer zero
 864:	80 91 63 00 	lds	r24, 0x0063
 868:	8f 5f       	subi	r24, 0xFF	; 255
 86a:	80 93 63 00 	sts	0x0063, r24
	if(counter>=10)//do that code every 10 ticks 
 86e:	80 91 63 00 	lds	r24, 0x0063
 872:	8a 30       	cpi	r24, 0x0A	; 10
 874:	08 f4       	brcc	.+2      	; 0x878 <__stack+0x19>
 876:	5c c0       	rjmp	.+184    	; 0x930 <__stack+0xd1>
	{
		counter=0;//clear the counter of ticks
 878:	10 92 63 00 	sts	0x0063, r1
		temp_sensor_reading=(0.25*ADC_u16Read());//read the temperature from the temperature sensor connected to the ADC of the micro controller
 87c:	0e 94 7f 00 	call	0xfe	; 0xfe <ADC_u16Read>
 880:	bc 01       	movw	r22, r24
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 95 05 	call	0xb2a	; 0xb2a <__floatunsisf>
 88a:	20 e0       	ldi	r18, 0x00	; 0
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	40 e8       	ldi	r20, 0x80	; 128
 890:	5e e3       	ldi	r21, 0x3E	; 62
 892:	0e 94 23 06 	call	0xc46	; 0xc46 <__mulsf3>
 896:	0e 94 69 05 	call	0xad2	; 0xad2 <__fixunssfsi>
 89a:	dc 01       	movw	r26, r24
 89c:	cb 01       	movw	r24, r22
 89e:	90 93 65 00 	sts	0x0065, r25
 8a2:	80 93 64 00 	sts	0x0064, r24
		if (temp_sensor_reading>=(required_temperature+1))//do that code if the read temperature if greater than required temperature by one or more
 8a6:	20 91 60 00 	lds	r18, 0x0060
 8aa:	30 91 61 00 	lds	r19, 0x0061
 8ae:	80 91 64 00 	lds	r24, 0x0064
 8b2:	90 91 65 00 	lds	r25, 0x0065
 8b6:	2f 5f       	subi	r18, 0xFF	; 255
 8b8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ba:	82 17       	cp	r24, r18
 8bc:	93 07       	cpc	r25, r19
 8be:	40 f0       	brcs	.+16     	; 0x8d0 <__stack+0x71>
		{
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of the air conditioning
 8c0:	84 e4       	ldi	r24, 0x44	; 68
 8c2:	62 e0       	ldi	r22, 0x02	; 2
 8c4:	0e 94 20 03 	call	0x640	; 0x640 <LED_vTurnOn>
			last_air_conditioning_value=AIR_CONDTIONING_ON;//save the value of the state of the air conditioning
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	80 93 62 00 	sts	0x0062, r24
 8ce:	30 c0       	rjmp	.+96     	; 0x930 <__stack+0xd1>
		}
		else if (temp_sensor_reading<=(required_temperature-1))//do that code if the read temperature if lesser than required temperature by one or more
 8d0:	20 91 60 00 	lds	r18, 0x0060
 8d4:	30 91 61 00 	lds	r19, 0x0061
 8d8:	80 91 64 00 	lds	r24, 0x0064
 8dc:	90 91 65 00 	lds	r25, 0x0065
 8e0:	21 50       	subi	r18, 0x01	; 1
 8e2:	30 40       	sbci	r19, 0x00	; 0
 8e4:	28 17       	cp	r18, r24
 8e6:	39 07       	cpc	r19, r25
 8e8:	38 f0       	brcs	.+14     	; 0x8f8 <__stack+0x99>
		{
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of the air conditioning
 8ea:	84 e4       	ldi	r24, 0x44	; 68
 8ec:	62 e0       	ldi	r22, 0x02	; 2
 8ee:	0e 94 24 03 	call	0x648	; 0x648 <LED_vTurnOff>
			last_air_conditioning_value=AIR_CONDTIONING_OFF;//save the value of the state of the air conditioning
 8f2:	10 92 62 00 	sts	0x0062, r1
 8f6:	1c c0       	rjmp	.+56     	; 0x930 <__stack+0xd1>
		}
		else if (required_temperature==temp_sensor_reading)//do that code if the read temperature is equal to the required temperature
 8f8:	20 91 60 00 	lds	r18, 0x0060
 8fc:	30 91 61 00 	lds	r19, 0x0061
 900:	80 91 64 00 	lds	r24, 0x0064
 904:	90 91 65 00 	lds	r25, 0x0065
 908:	28 17       	cp	r18, r24
 90a:	39 07       	cpc	r19, r25
 90c:	89 f4       	brne	.+34     	; 0x930 <__stack+0xd1>
		{
			if (last_air_conditioning_value==AIR_CONDTIONING_ON)//in the case of the last saved status of the air conditioning was on 
 90e:	80 91 62 00 	lds	r24, 0x0062
 912:	81 30       	cpi	r24, 0x01	; 1
 914:	29 f4       	brne	.+10     	; 0x920 <__stack+0xc1>
			{
				LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of the air conditioning
 916:	84 e4       	ldi	r24, 0x44	; 68
 918:	62 e0       	ldi	r22, 0x02	; 2
 91a:	0e 94 20 03 	call	0x640	; 0x640 <LED_vTurnOn>
 91e:	08 c0       	rjmp	.+16     	; 0x930 <__stack+0xd1>
			}
			else if (last_air_conditioning_value==AIR_CONDTIONING_OFF)//in the case of the last saved status of the air conditioning was off 
 920:	80 91 62 00 	lds	r24, 0x0062
 924:	88 23       	and	r24, r24
 926:	21 f4       	brne	.+8      	; 0x930 <__stack+0xd1>
			{
				LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of the air conditioning
 928:	84 e4       	ldi	r24, 0x44	; 68
 92a:	62 e0       	ldi	r22, 0x02	; 2
 92c:	0e 94 24 03 	call	0x648	; 0x648 <LED_vTurnOff>
			}
		}
	}
}
 930:	ff 91       	pop	r31
 932:	ef 91       	pop	r30
 934:	bf 91       	pop	r27
 936:	af 91       	pop	r26
 938:	9f 91       	pop	r25
 93a:	8f 91       	pop	r24
 93c:	7f 91       	pop	r23
 93e:	6f 91       	pop	r22
 940:	5f 91       	pop	r21
 942:	4f 91       	pop	r20
 944:	3f 91       	pop	r19
 946:	2f 91       	pop	r18
 948:	0f 90       	pop	r0
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	0f 90       	pop	r0
 94e:	1f 90       	pop	r1
 950:	18 95       	reti

00000952 <SPI_vInitMaster>:
#include "STD_MESSAGES.h"
#include "std_macros.h"

void SPI_vInitMaster (void)
{
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
 952:	87 b3       	in	r24, 0x17	; 23
 954:	80 6b       	ori	r24, 0xB0	; 176
 956:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
 958:	8d b1       	in	r24, 0x0d	; 13
 95a:	81 65       	ori	r24, 0x51	; 81
 95c:	8d b9       	out	0x0d, r24	; 13
}
 95e:	08 95       	ret

00000960 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
 960:	be 9a       	sbi	0x17, 6	; 23
	SPCR |= (1<<SPE);//Enable the SPI
 962:	6e 9a       	sbi	0x0d, 6	; 13
}
 964:	08 95       	ret

00000966 <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
 966:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
 968:	77 9b       	sbis	0x0e, 7	; 14
 96a:	fe cf       	rjmp	.-4      	; 0x968 <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
 96c:	8f b1       	in	r24, 0x0f	; 15
 96e:	08 95       	ret

00000970 <timer0_initializeCTC>:

void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
 970:	8e e4       	ldi	r24, 0x4E	; 78
 972:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
 974:	83 b7       	in	r24, 0x33	; 51
 976:	88 60       	ori	r24, 0x08	; 8
 978:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
 97a:	83 b7       	in	r24, 0x33	; 51
 97c:	8f 7b       	andi	r24, 0xBF	; 191
 97e:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
 980:	83 b7       	in	r24, 0x33	; 51
 982:	81 60       	ori	r24, 0x01	; 1
 984:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 986:	83 b7       	in	r24, 0x33	; 51
 988:	8d 7f       	andi	r24, 0xFD	; 253
 98a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 98c:	83 b7       	in	r24, 0x33	; 51
 98e:	84 60       	ori	r24, 0x04	; 4
 990:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 992:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
 994:	89 b7       	in	r24, 0x39	; 57
 996:	82 60       	ori	r24, 0x02	; 2
 998:	89 bf       	out	0x39, r24	; 57
}
 99a:	08 95       	ret

0000099c <timer0_stop>:

void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
 99c:	83 b7       	in	r24, 0x33	; 51
 99e:	8e 7f       	andi	r24, 0xFE	; 254
 9a0:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 9a2:	83 b7       	in	r24, 0x33	; 51
 9a4:	8d 7f       	andi	r24, 0xFD	; 253
 9a6:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
 9a8:	83 b7       	in	r24, 0x33	; 51
 9aa:	8b 7f       	andi	r24, 0xFB	; 251
 9ac:	83 bf       	out	0x33, r24	; 51
}
 9ae:	08 95       	ret

000009b0 <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
 9b0:	80 e8       	ldi	r24, 0x80	; 128
 9b2:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//adjust fast pulse width modulation mode
	SET_BIT(TCCR0, WGM00); 
 9b4:	83 b7       	in	r24, 0x33	; 51
 9b6:	80 64       	ori	r24, 0x40	; 64
 9b8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, WGM01);
 9ba:	83 b7       	in	r24, 0x33	; 51
 9bc:	88 60       	ori	r24, 0x08	; 8
 9be:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 9c0:	78 94       	sei
	
	SET_BIT(TCCR0, COM01); //adjust non inverting mode
 9c2:	83 b7       	in	r24, 0x33	; 51
 9c4:	80 62       	ori	r24, 0x20	; 32
 9c6:	83 bf       	out	0x33, r24	; 51
	
	//Enable timer0 interrupt for overflow mode
	SET_BIT(TIMSK,TOIE0);
 9c8:	89 b7       	in	r24, 0x39	; 57
 9ca:	81 60       	ori	r24, 0x01	; 1
 9cc:	89 bf       	out	0x39, r24	; 57
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
 9ce:	83 b7       	in	r24, 0x33	; 51
 9d0:	81 60       	ori	r24, 0x01	; 1
 9d2:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 9d4:	83 b7       	in	r24, 0x33	; 51
 9d6:	8d 7f       	andi	r24, 0xFD	; 253
 9d8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 9da:	83 b7       	in	r24, 0x33	; 51
 9dc:	84 60       	ori	r24, 0x04	; 4
 9de:	83 bf       	out	0x33, r24	; 51
}
 9e0:	08 95       	ret

000009e2 <change_dutycycle>:
void change_dutycycle(float64 duty)
{
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
 9e2:	20 e0       	ldi	r18, 0x00	; 0
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	48 ec       	ldi	r20, 0xC8	; 200
 9e8:	52 e4       	ldi	r21, 0x42	; 66
 9ea:	0e 94 01 05 	call	0xa02	; 0xa02 <__divsf3>
 9ee:	20 e0       	ldi	r18, 0x00	; 0
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	40 e8       	ldi	r20, 0x80	; 128
 9f4:	53 e4       	ldi	r21, 0x43	; 67
 9f6:	0e 94 23 06 	call	0xc46	; 0xc46 <__mulsf3>
 9fa:	0e 94 69 05 	call	0xad2	; 0xad2 <__fixunssfsi>
 9fe:	6c bf       	out	0x3c, r22	; 60
}
 a00:	08 95       	ret

00000a02 <__divsf3>:
 a02:	0c d0       	rcall	.+24     	; 0xa1c <__divsf3x>
 a04:	e6 c0       	rjmp	.+460    	; 0xbd2 <__fp_round>
 a06:	de d0       	rcall	.+444    	; 0xbc4 <__fp_pscB>
 a08:	40 f0       	brcs	.+16     	; 0xa1a <__divsf3+0x18>
 a0a:	d5 d0       	rcall	.+426    	; 0xbb6 <__fp_pscA>
 a0c:	30 f0       	brcs	.+12     	; 0xa1a <__divsf3+0x18>
 a0e:	21 f4       	brne	.+8      	; 0xa18 <__divsf3+0x16>
 a10:	5f 3f       	cpi	r21, 0xFF	; 255
 a12:	19 f0       	breq	.+6      	; 0xa1a <__divsf3+0x18>
 a14:	c7 c0       	rjmp	.+398    	; 0xba4 <__fp_inf>
 a16:	51 11       	cpse	r21, r1
 a18:	10 c1       	rjmp	.+544    	; 0xc3a <__fp_szero>
 a1a:	ca c0       	rjmp	.+404    	; 0xbb0 <__fp_nan>

00000a1c <__divsf3x>:
 a1c:	eb d0       	rcall	.+470    	; 0xbf4 <__fp_split3>
 a1e:	98 f3       	brcs	.-26     	; 0xa06 <__divsf3+0x4>

00000a20 <__divsf3_pse>:
 a20:	99 23       	and	r25, r25
 a22:	c9 f3       	breq	.-14     	; 0xa16 <__divsf3+0x14>
 a24:	55 23       	and	r21, r21
 a26:	b1 f3       	breq	.-20     	; 0xa14 <__divsf3+0x12>
 a28:	95 1b       	sub	r25, r21
 a2a:	55 0b       	sbc	r21, r21
 a2c:	bb 27       	eor	r27, r27
 a2e:	aa 27       	eor	r26, r26
 a30:	62 17       	cp	r22, r18
 a32:	73 07       	cpc	r23, r19
 a34:	84 07       	cpc	r24, r20
 a36:	38 f0       	brcs	.+14     	; 0xa46 <__divsf3_pse+0x26>
 a38:	9f 5f       	subi	r25, 0xFF	; 255
 a3a:	5f 4f       	sbci	r21, 0xFF	; 255
 a3c:	22 0f       	add	r18, r18
 a3e:	33 1f       	adc	r19, r19
 a40:	44 1f       	adc	r20, r20
 a42:	aa 1f       	adc	r26, r26
 a44:	a9 f3       	breq	.-22     	; 0xa30 <__divsf3_pse+0x10>
 a46:	33 d0       	rcall	.+102    	; 0xaae <__divsf3_pse+0x8e>
 a48:	0e 2e       	mov	r0, r30
 a4a:	3a f0       	brmi	.+14     	; 0xa5a <__divsf3_pse+0x3a>
 a4c:	e0 e8       	ldi	r30, 0x80	; 128
 a4e:	30 d0       	rcall	.+96     	; 0xab0 <__divsf3_pse+0x90>
 a50:	91 50       	subi	r25, 0x01	; 1
 a52:	50 40       	sbci	r21, 0x00	; 0
 a54:	e6 95       	lsr	r30
 a56:	00 1c       	adc	r0, r0
 a58:	ca f7       	brpl	.-14     	; 0xa4c <__divsf3_pse+0x2c>
 a5a:	29 d0       	rcall	.+82     	; 0xaae <__divsf3_pse+0x8e>
 a5c:	fe 2f       	mov	r31, r30
 a5e:	27 d0       	rcall	.+78     	; 0xaae <__divsf3_pse+0x8e>
 a60:	66 0f       	add	r22, r22
 a62:	77 1f       	adc	r23, r23
 a64:	88 1f       	adc	r24, r24
 a66:	bb 1f       	adc	r27, r27
 a68:	26 17       	cp	r18, r22
 a6a:	37 07       	cpc	r19, r23
 a6c:	48 07       	cpc	r20, r24
 a6e:	ab 07       	cpc	r26, r27
 a70:	b0 e8       	ldi	r27, 0x80	; 128
 a72:	09 f0       	breq	.+2      	; 0xa76 <__divsf3_pse+0x56>
 a74:	bb 0b       	sbc	r27, r27
 a76:	80 2d       	mov	r24, r0
 a78:	bf 01       	movw	r22, r30
 a7a:	ff 27       	eor	r31, r31
 a7c:	93 58       	subi	r25, 0x83	; 131
 a7e:	5f 4f       	sbci	r21, 0xFF	; 255
 a80:	2a f0       	brmi	.+10     	; 0xa8c <__divsf3_pse+0x6c>
 a82:	9e 3f       	cpi	r25, 0xFE	; 254
 a84:	51 05       	cpc	r21, r1
 a86:	68 f0       	brcs	.+26     	; 0xaa2 <__divsf3_pse+0x82>
 a88:	8d c0       	rjmp	.+282    	; 0xba4 <__fp_inf>
 a8a:	d7 c0       	rjmp	.+430    	; 0xc3a <__fp_szero>
 a8c:	5f 3f       	cpi	r21, 0xFF	; 255
 a8e:	ec f3       	brlt	.-6      	; 0xa8a <__divsf3_pse+0x6a>
 a90:	98 3e       	cpi	r25, 0xE8	; 232
 a92:	dc f3       	brlt	.-10     	; 0xa8a <__divsf3_pse+0x6a>
 a94:	86 95       	lsr	r24
 a96:	77 95       	ror	r23
 a98:	67 95       	ror	r22
 a9a:	b7 95       	ror	r27
 a9c:	f7 95       	ror	r31
 a9e:	9f 5f       	subi	r25, 0xFF	; 255
 aa0:	c9 f7       	brne	.-14     	; 0xa94 <__divsf3_pse+0x74>
 aa2:	88 0f       	add	r24, r24
 aa4:	91 1d       	adc	r25, r1
 aa6:	96 95       	lsr	r25
 aa8:	87 95       	ror	r24
 aaa:	97 f9       	bld	r25, 7
 aac:	08 95       	ret
 aae:	e1 e0       	ldi	r30, 0x01	; 1
 ab0:	66 0f       	add	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	bb 1f       	adc	r27, r27
 ab8:	62 17       	cp	r22, r18
 aba:	73 07       	cpc	r23, r19
 abc:	84 07       	cpc	r24, r20
 abe:	ba 07       	cpc	r27, r26
 ac0:	20 f0       	brcs	.+8      	; 0xaca <__divsf3_pse+0xaa>
 ac2:	62 1b       	sub	r22, r18
 ac4:	73 0b       	sbc	r23, r19
 ac6:	84 0b       	sbc	r24, r20
 ac8:	ba 0b       	sbc	r27, r26
 aca:	ee 1f       	adc	r30, r30
 acc:	88 f7       	brcc	.-30     	; 0xab0 <__divsf3_pse+0x90>
 ace:	e0 95       	com	r30
 ad0:	08 95       	ret

00000ad2 <__fixunssfsi>:
 ad2:	98 d0       	rcall	.+304    	; 0xc04 <__fp_splitA>
 ad4:	88 f0       	brcs	.+34     	; 0xaf8 <__fixunssfsi+0x26>
 ad6:	9f 57       	subi	r25, 0x7F	; 127
 ad8:	90 f0       	brcs	.+36     	; 0xafe <__fixunssfsi+0x2c>
 ada:	b9 2f       	mov	r27, r25
 adc:	99 27       	eor	r25, r25
 ade:	b7 51       	subi	r27, 0x17	; 23
 ae0:	a0 f0       	brcs	.+40     	; 0xb0a <__fixunssfsi+0x38>
 ae2:	d1 f0       	breq	.+52     	; 0xb18 <__fixunssfsi+0x46>
 ae4:	66 0f       	add	r22, r22
 ae6:	77 1f       	adc	r23, r23
 ae8:	88 1f       	adc	r24, r24
 aea:	99 1f       	adc	r25, r25
 aec:	1a f0       	brmi	.+6      	; 0xaf4 <__fixunssfsi+0x22>
 aee:	ba 95       	dec	r27
 af0:	c9 f7       	brne	.-14     	; 0xae4 <__fixunssfsi+0x12>
 af2:	12 c0       	rjmp	.+36     	; 0xb18 <__fixunssfsi+0x46>
 af4:	b1 30       	cpi	r27, 0x01	; 1
 af6:	81 f0       	breq	.+32     	; 0xb18 <__fixunssfsi+0x46>
 af8:	9f d0       	rcall	.+318    	; 0xc38 <__fp_zero>
 afa:	b1 e0       	ldi	r27, 0x01	; 1
 afc:	08 95       	ret
 afe:	9c c0       	rjmp	.+312    	; 0xc38 <__fp_zero>
 b00:	67 2f       	mov	r22, r23
 b02:	78 2f       	mov	r23, r24
 b04:	88 27       	eor	r24, r24
 b06:	b8 5f       	subi	r27, 0xF8	; 248
 b08:	39 f0       	breq	.+14     	; 0xb18 <__fixunssfsi+0x46>
 b0a:	b9 3f       	cpi	r27, 0xF9	; 249
 b0c:	cc f3       	brlt	.-14     	; 0xb00 <__fixunssfsi+0x2e>
 b0e:	86 95       	lsr	r24
 b10:	77 95       	ror	r23
 b12:	67 95       	ror	r22
 b14:	b3 95       	inc	r27
 b16:	d9 f7       	brne	.-10     	; 0xb0e <__fixunssfsi+0x3c>
 b18:	3e f4       	brtc	.+14     	; 0xb28 <__fixunssfsi+0x56>
 b1a:	90 95       	com	r25
 b1c:	80 95       	com	r24
 b1e:	70 95       	com	r23
 b20:	61 95       	neg	r22
 b22:	7f 4f       	sbci	r23, 0xFF	; 255
 b24:	8f 4f       	sbci	r24, 0xFF	; 255
 b26:	9f 4f       	sbci	r25, 0xFF	; 255
 b28:	08 95       	ret

00000b2a <__floatunsisf>:
 b2a:	e8 94       	clt
 b2c:	09 c0       	rjmp	.+18     	; 0xb40 <__floatsisf+0x12>

00000b2e <__floatsisf>:
 b2e:	97 fb       	bst	r25, 7
 b30:	3e f4       	brtc	.+14     	; 0xb40 <__floatsisf+0x12>
 b32:	90 95       	com	r25
 b34:	80 95       	com	r24
 b36:	70 95       	com	r23
 b38:	61 95       	neg	r22
 b3a:	7f 4f       	sbci	r23, 0xFF	; 255
 b3c:	8f 4f       	sbci	r24, 0xFF	; 255
 b3e:	9f 4f       	sbci	r25, 0xFF	; 255
 b40:	99 23       	and	r25, r25
 b42:	a9 f0       	breq	.+42     	; 0xb6e <__floatsisf+0x40>
 b44:	f9 2f       	mov	r31, r25
 b46:	96 e9       	ldi	r25, 0x96	; 150
 b48:	bb 27       	eor	r27, r27
 b4a:	93 95       	inc	r25
 b4c:	f6 95       	lsr	r31
 b4e:	87 95       	ror	r24
 b50:	77 95       	ror	r23
 b52:	67 95       	ror	r22
 b54:	b7 95       	ror	r27
 b56:	f1 11       	cpse	r31, r1
 b58:	f8 cf       	rjmp	.-16     	; 0xb4a <__floatsisf+0x1c>
 b5a:	fa f4       	brpl	.+62     	; 0xb9a <__floatsisf+0x6c>
 b5c:	bb 0f       	add	r27, r27
 b5e:	11 f4       	brne	.+4      	; 0xb64 <__floatsisf+0x36>
 b60:	60 ff       	sbrs	r22, 0
 b62:	1b c0       	rjmp	.+54     	; 0xb9a <__floatsisf+0x6c>
 b64:	6f 5f       	subi	r22, 0xFF	; 255
 b66:	7f 4f       	sbci	r23, 0xFF	; 255
 b68:	8f 4f       	sbci	r24, 0xFF	; 255
 b6a:	9f 4f       	sbci	r25, 0xFF	; 255
 b6c:	16 c0       	rjmp	.+44     	; 0xb9a <__floatsisf+0x6c>
 b6e:	88 23       	and	r24, r24
 b70:	11 f0       	breq	.+4      	; 0xb76 <__floatsisf+0x48>
 b72:	96 e9       	ldi	r25, 0x96	; 150
 b74:	11 c0       	rjmp	.+34     	; 0xb98 <__floatsisf+0x6a>
 b76:	77 23       	and	r23, r23
 b78:	21 f0       	breq	.+8      	; 0xb82 <__floatsisf+0x54>
 b7a:	9e e8       	ldi	r25, 0x8E	; 142
 b7c:	87 2f       	mov	r24, r23
 b7e:	76 2f       	mov	r23, r22
 b80:	05 c0       	rjmp	.+10     	; 0xb8c <__floatsisf+0x5e>
 b82:	66 23       	and	r22, r22
 b84:	71 f0       	breq	.+28     	; 0xba2 <__floatsisf+0x74>
 b86:	96 e8       	ldi	r25, 0x86	; 134
 b88:	86 2f       	mov	r24, r22
 b8a:	70 e0       	ldi	r23, 0x00	; 0
 b8c:	60 e0       	ldi	r22, 0x00	; 0
 b8e:	2a f0       	brmi	.+10     	; 0xb9a <__floatsisf+0x6c>
 b90:	9a 95       	dec	r25
 b92:	66 0f       	add	r22, r22
 b94:	77 1f       	adc	r23, r23
 b96:	88 1f       	adc	r24, r24
 b98:	da f7       	brpl	.-10     	; 0xb90 <__floatsisf+0x62>
 b9a:	88 0f       	add	r24, r24
 b9c:	96 95       	lsr	r25
 b9e:	87 95       	ror	r24
 ba0:	97 f9       	bld	r25, 7
 ba2:	08 95       	ret

00000ba4 <__fp_inf>:
 ba4:	97 f9       	bld	r25, 7
 ba6:	9f 67       	ori	r25, 0x7F	; 127
 ba8:	80 e8       	ldi	r24, 0x80	; 128
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	08 95       	ret

00000bb0 <__fp_nan>:
 bb0:	9f ef       	ldi	r25, 0xFF	; 255
 bb2:	80 ec       	ldi	r24, 0xC0	; 192
 bb4:	08 95       	ret

00000bb6 <__fp_pscA>:
 bb6:	00 24       	eor	r0, r0
 bb8:	0a 94       	dec	r0
 bba:	16 16       	cp	r1, r22
 bbc:	17 06       	cpc	r1, r23
 bbe:	18 06       	cpc	r1, r24
 bc0:	09 06       	cpc	r0, r25
 bc2:	08 95       	ret

00000bc4 <__fp_pscB>:
 bc4:	00 24       	eor	r0, r0
 bc6:	0a 94       	dec	r0
 bc8:	12 16       	cp	r1, r18
 bca:	13 06       	cpc	r1, r19
 bcc:	14 06       	cpc	r1, r20
 bce:	05 06       	cpc	r0, r21
 bd0:	08 95       	ret

00000bd2 <__fp_round>:
 bd2:	09 2e       	mov	r0, r25
 bd4:	03 94       	inc	r0
 bd6:	00 0c       	add	r0, r0
 bd8:	11 f4       	brne	.+4      	; 0xbde <__fp_round+0xc>
 bda:	88 23       	and	r24, r24
 bdc:	52 f0       	brmi	.+20     	; 0xbf2 <__fp_round+0x20>
 bde:	bb 0f       	add	r27, r27
 be0:	40 f4       	brcc	.+16     	; 0xbf2 <__fp_round+0x20>
 be2:	bf 2b       	or	r27, r31
 be4:	11 f4       	brne	.+4      	; 0xbea <__fp_round+0x18>
 be6:	60 ff       	sbrs	r22, 0
 be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__fp_round+0x20>
 bea:	6f 5f       	subi	r22, 0xFF	; 255
 bec:	7f 4f       	sbci	r23, 0xFF	; 255
 bee:	8f 4f       	sbci	r24, 0xFF	; 255
 bf0:	9f 4f       	sbci	r25, 0xFF	; 255
 bf2:	08 95       	ret

00000bf4 <__fp_split3>:
 bf4:	57 fd       	sbrc	r21, 7
 bf6:	90 58       	subi	r25, 0x80	; 128
 bf8:	44 0f       	add	r20, r20
 bfa:	55 1f       	adc	r21, r21
 bfc:	59 f0       	breq	.+22     	; 0xc14 <__fp_splitA+0x10>
 bfe:	5f 3f       	cpi	r21, 0xFF	; 255
 c00:	71 f0       	breq	.+28     	; 0xc1e <__fp_splitA+0x1a>
 c02:	47 95       	ror	r20

00000c04 <__fp_splitA>:
 c04:	88 0f       	add	r24, r24
 c06:	97 fb       	bst	r25, 7
 c08:	99 1f       	adc	r25, r25
 c0a:	61 f0       	breq	.+24     	; 0xc24 <__fp_splitA+0x20>
 c0c:	9f 3f       	cpi	r25, 0xFF	; 255
 c0e:	79 f0       	breq	.+30     	; 0xc2e <__fp_splitA+0x2a>
 c10:	87 95       	ror	r24
 c12:	08 95       	ret
 c14:	12 16       	cp	r1, r18
 c16:	13 06       	cpc	r1, r19
 c18:	14 06       	cpc	r1, r20
 c1a:	55 1f       	adc	r21, r21
 c1c:	f2 cf       	rjmp	.-28     	; 0xc02 <__fp_split3+0xe>
 c1e:	46 95       	lsr	r20
 c20:	f1 df       	rcall	.-30     	; 0xc04 <__fp_splitA>
 c22:	08 c0       	rjmp	.+16     	; 0xc34 <__fp_splitA+0x30>
 c24:	16 16       	cp	r1, r22
 c26:	17 06       	cpc	r1, r23
 c28:	18 06       	cpc	r1, r24
 c2a:	99 1f       	adc	r25, r25
 c2c:	f1 cf       	rjmp	.-30     	; 0xc10 <__fp_splitA+0xc>
 c2e:	86 95       	lsr	r24
 c30:	71 05       	cpc	r23, r1
 c32:	61 05       	cpc	r22, r1
 c34:	08 94       	sec
 c36:	08 95       	ret

00000c38 <__fp_zero>:
 c38:	e8 94       	clt

00000c3a <__fp_szero>:
 c3a:	bb 27       	eor	r27, r27
 c3c:	66 27       	eor	r22, r22
 c3e:	77 27       	eor	r23, r23
 c40:	cb 01       	movw	r24, r22
 c42:	97 f9       	bld	r25, 7
 c44:	08 95       	ret

00000c46 <__mulsf3>:
 c46:	0b d0       	rcall	.+22     	; 0xc5e <__mulsf3x>
 c48:	c4 cf       	rjmp	.-120    	; 0xbd2 <__fp_round>
 c4a:	b5 df       	rcall	.-150    	; 0xbb6 <__fp_pscA>
 c4c:	28 f0       	brcs	.+10     	; 0xc58 <__mulsf3+0x12>
 c4e:	ba df       	rcall	.-140    	; 0xbc4 <__fp_pscB>
 c50:	18 f0       	brcs	.+6      	; 0xc58 <__mulsf3+0x12>
 c52:	95 23       	and	r25, r21
 c54:	09 f0       	breq	.+2      	; 0xc58 <__mulsf3+0x12>
 c56:	a6 cf       	rjmp	.-180    	; 0xba4 <__fp_inf>
 c58:	ab cf       	rjmp	.-170    	; 0xbb0 <__fp_nan>
 c5a:	11 24       	eor	r1, r1
 c5c:	ee cf       	rjmp	.-36     	; 0xc3a <__fp_szero>

00000c5e <__mulsf3x>:
 c5e:	ca df       	rcall	.-108    	; 0xbf4 <__fp_split3>
 c60:	a0 f3       	brcs	.-24     	; 0xc4a <__mulsf3+0x4>

00000c62 <__mulsf3_pse>:
 c62:	95 9f       	mul	r25, r21
 c64:	d1 f3       	breq	.-12     	; 0xc5a <__mulsf3+0x14>
 c66:	95 0f       	add	r25, r21
 c68:	50 e0       	ldi	r21, 0x00	; 0
 c6a:	55 1f       	adc	r21, r21
 c6c:	62 9f       	mul	r22, r18
 c6e:	f0 01       	movw	r30, r0
 c70:	72 9f       	mul	r23, r18
 c72:	bb 27       	eor	r27, r27
 c74:	f0 0d       	add	r31, r0
 c76:	b1 1d       	adc	r27, r1
 c78:	63 9f       	mul	r22, r19
 c7a:	aa 27       	eor	r26, r26
 c7c:	f0 0d       	add	r31, r0
 c7e:	b1 1d       	adc	r27, r1
 c80:	aa 1f       	adc	r26, r26
 c82:	64 9f       	mul	r22, r20
 c84:	66 27       	eor	r22, r22
 c86:	b0 0d       	add	r27, r0
 c88:	a1 1d       	adc	r26, r1
 c8a:	66 1f       	adc	r22, r22
 c8c:	82 9f       	mul	r24, r18
 c8e:	22 27       	eor	r18, r18
 c90:	b0 0d       	add	r27, r0
 c92:	a1 1d       	adc	r26, r1
 c94:	62 1f       	adc	r22, r18
 c96:	73 9f       	mul	r23, r19
 c98:	b0 0d       	add	r27, r0
 c9a:	a1 1d       	adc	r26, r1
 c9c:	62 1f       	adc	r22, r18
 c9e:	83 9f       	mul	r24, r19
 ca0:	a0 0d       	add	r26, r0
 ca2:	61 1d       	adc	r22, r1
 ca4:	22 1f       	adc	r18, r18
 ca6:	74 9f       	mul	r23, r20
 ca8:	33 27       	eor	r19, r19
 caa:	a0 0d       	add	r26, r0
 cac:	61 1d       	adc	r22, r1
 cae:	23 1f       	adc	r18, r19
 cb0:	84 9f       	mul	r24, r20
 cb2:	60 0d       	add	r22, r0
 cb4:	21 1d       	adc	r18, r1
 cb6:	82 2f       	mov	r24, r18
 cb8:	76 2f       	mov	r23, r22
 cba:	6a 2f       	mov	r22, r26
 cbc:	11 24       	eor	r1, r1
 cbe:	9f 57       	subi	r25, 0x7F	; 127
 cc0:	50 40       	sbci	r21, 0x00	; 0
 cc2:	8a f0       	brmi	.+34     	; 0xce6 <__mulsf3_pse+0x84>
 cc4:	e1 f0       	breq	.+56     	; 0xcfe <__mulsf3_pse+0x9c>
 cc6:	88 23       	and	r24, r24
 cc8:	4a f0       	brmi	.+18     	; 0xcdc <__mulsf3_pse+0x7a>
 cca:	ee 0f       	add	r30, r30
 ccc:	ff 1f       	adc	r31, r31
 cce:	bb 1f       	adc	r27, r27
 cd0:	66 1f       	adc	r22, r22
 cd2:	77 1f       	adc	r23, r23
 cd4:	88 1f       	adc	r24, r24
 cd6:	91 50       	subi	r25, 0x01	; 1
 cd8:	50 40       	sbci	r21, 0x00	; 0
 cda:	a9 f7       	brne	.-22     	; 0xcc6 <__mulsf3_pse+0x64>
 cdc:	9e 3f       	cpi	r25, 0xFE	; 254
 cde:	51 05       	cpc	r21, r1
 ce0:	70 f0       	brcs	.+28     	; 0xcfe <__mulsf3_pse+0x9c>
 ce2:	60 cf       	rjmp	.-320    	; 0xba4 <__fp_inf>
 ce4:	aa cf       	rjmp	.-172    	; 0xc3a <__fp_szero>
 ce6:	5f 3f       	cpi	r21, 0xFF	; 255
 ce8:	ec f3       	brlt	.-6      	; 0xce4 <__mulsf3_pse+0x82>
 cea:	98 3e       	cpi	r25, 0xE8	; 232
 cec:	dc f3       	brlt	.-10     	; 0xce4 <__mulsf3_pse+0x82>
 cee:	86 95       	lsr	r24
 cf0:	77 95       	ror	r23
 cf2:	67 95       	ror	r22
 cf4:	b7 95       	ror	r27
 cf6:	f7 95       	ror	r31
 cf8:	e7 95       	ror	r30
 cfa:	9f 5f       	subi	r25, 0xFF	; 255
 cfc:	c1 f7       	brne	.-16     	; 0xcee <__mulsf3_pse+0x8c>
 cfe:	fe 2b       	or	r31, r30
 d00:	88 0f       	add	r24, r24
 d02:	91 1d       	adc	r25, r1
 d04:	96 95       	lsr	r25
 d06:	87 95       	ror	r24
 d08:	97 f9       	bld	r25, 7
 d0a:	08 95       	ret

00000d0c <_exit>:
 d0c:	f8 94       	cli

00000d0e <__stop_program>:
 d0e:	ff cf       	rjmp	.-2      	; 0xd0e <__stop_program>
